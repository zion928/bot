discord.py와 riotapi, pymysql을 활용하여 내전을 나누는 봇

db - sql 사용

사용자가 소환사명을 등록하여 sql에 소환사 명과 티어를 등록

prefix = '?'

1. reg [소환사명] [티어] [주라인] [부라인1], [부라인2] ... - 소환사 등록

riotapi를 바탕으로 소환사의 티어를 저장하고, 최근 매치 데이터를 바탕으로 주라인과 부라인들 설정

(티어) 매개변수는 티어 데이터가 존재하지 않거나 일치하지 않는다면 직접 입력
(라인) 매개변수는 라인 데이터가 존재하지 않거나 일치하지 않는다면 직접 입력

등록 이후 라인데이터 혹은 티어데이터 없다면 경고메시지 
'???님의 티어/라인이 존재하지 않습니다! 직접 입력하세요. 직접 등록은 ?reg [소환사명] [티어] [주라인] [부라인1], [부라인2] ... '
출력함.
아니면,
'???님의 티어는 ?? ?이며, 주라인 ??, 부라인n1 ??, 부라인n2 ??, ... 입니다!' 출력. 이는 부라인이 2까지 밖에 없다면 줄여서 부라인2까지 출력

sql에 저장되는 데이터는
SummonName=[소환사명], 
tier=[티어], 
main_line={[주라인], main_tier_score},
sub_line1={[부라인1], sub_tier_score1},
sub_line2={[부라인2], sub_tier_score2},
sub_line3={[부라인3], sub_tier_score3},
sub_line4={[부라인4], sub_tier_score4},
로 구성.

main_tier_score와 sub_tier_score 변수들은 티어와 라인에 따라 결정되어 저장.
환산은 방법 TierScore.xlsx에 저장된 DataFrame을 활용하여 지정된 범위에 포함된 소환사의 점수를 반환.

TierScore.xlsx에는 티어와 라인으로 구분된 DataFrame의 모습을 띄고 있음.
각 sub_tier_score에는
sub_tier_score1 = main_tier_score * 0.85
sub_tier_score2 = main_tier_score * 0.8
sub_tier_score3 = main_tier_score * 0.75
sub_tier_score4 = main_tier_score * 0.7
의 보정치를 지님.

부라인이 없다면 None 반환.

2. TeamSet [소환사1] [소환사2] ... [소환사10] - 팀 짜기
	입력된 10명의 소환사를 5명씩 2팀으로 나눈다.
	각팀에 TOP,JUG,MID,ADC,SUP으로 라인을 구분하여 한 명씩만 등록이 가능하다.
	그 규칙은 이러하다.
	1. 각 팀에 TOP,JUG,MID,ADC,SUP에는 단 한명만 배치되어야한다.
	2. 주라인만 존재하는 소환사는 가장 먼저 그 라인에 배치한다.
	3. 티어가 낮은순으로 주라인에 배치될 수 있도록 한다.
	4. 주라인에 배치될 수 없다면 부라인1,2,3,4를 활용한다.
	5. 각팀의 점수의 합들의 차이가 최소치인 경우인 두 팀을 출력한다.

- sql에 소환사가 없다면
	- '??? 님은 등록되지 않은 소환사 입니다.' 출력 -> 등록 명령어 출력

- sql의 소환사의 sql에 티어 데이터가 없다면 
	- '??? 님의 티어 데이터가 없습니다' 출력

3. r [소환사명] - sql에 저장된 소환사의 데이터들을 새로고침
